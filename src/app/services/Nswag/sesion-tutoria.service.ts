//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { environment } from "src/environments/environment";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class SesionTutoriaService {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = environment.baseUrl;
    }
        /**
     * @param body (optional) 
     * @return Success
     */
    detalleProgramacionPOST(body: RequestDetalleProgramacionDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleProgramacion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleProgramacionPOST(_response);
        });
    }

    protected processDetalleProgramacionPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    detalleProgramacionPUT(body: RequestDetalleProgramacionDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleProgramacion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleProgramacionPUT(_response);
        });
    }

    protected processDetalleProgramacionPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    detalleProgramacionAll(): Promise<ResponseDetalleProgramacionDto[]> {
        let url_ = this.baseUrl + "/api/DetalleProgramacion";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleProgramacionAll(_response);
        });
    }

    protected processDetalleProgramacionAll(response: Response): Promise<ResponseDetalleProgramacionDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseDetalleProgramacionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDetalleProgramacionDto[]>(null as any);
    }

    /**
     * @return Success
     */
    detalleProgramacionDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleProgramacion/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleProgramacionDELETE(_response);
        });
    }

    protected processDetalleProgramacionDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    detalleProgramacionActivoByIdProgramacion(id: number): Promise<ResponseDetalleProgramacionDto> {
        let url_ = this.baseUrl + "/api/DetalleProgramacion/DetalleProgramacionByIdProgramacion/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleProgramacionByIdProgramacion(_response);
        });
    }

    protected processDetalleProgramacionByIdProgramacion(response: Response): Promise<ResponseDetalleProgramacionDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseDetalleProgramacionDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDetalleProgramacionDto>(null as any);
    }

    /**
     * @return Success
     */
    desactivarDetalleProgramacionByIdProgramacion(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleProgramacion/DesactivarDetalleProgramacionByIdProgramacion/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivarDetalleProgramacionByIdProgramacion(_response);
        });
    }

    protected processDesactivarDetalleProgramacionByIdProgramacion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    detallesProgramacionByIdProgramacion(id: number): Promise<ResponseDetalleProgramacionDto[]> {
        let url_ = this.baseUrl + "/api/DetalleProgramacion/DetallesProgramacionByIdProgramacion/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetallesProgramacionByIdProgramacion(_response);
        });
    }

    protected processDetallesProgramacionByIdProgramacion(response: Response): Promise<ResponseDetalleProgramacionDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseDetalleProgramacionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDetalleProgramacionDto[]>(null as any);
    }
    

    /**
     * @param body (optional) 
     * @return Success
     */
    detalleTutoriaPOST(body: RequestDetalleTutoriaDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleTutoria";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleTutoriaPOST(_response);
        });
    }

    protected processDetalleTutoriaPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    detalleTutoriaPUT(body: RequestDetalleTutoriaDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleTutoria";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
            
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleTutoriaPUT(_response);
        });
    }

    protected processDetalleTutoriaPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    detalleTutoriaAll(): Promise<ResponseDetalleTutoriaDto[]> {
        let url_ = this.baseUrl + "/api/DetalleTutoria";
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleTutoriaAll(_response);
        });
    }

    protected processDetalleTutoriaAll(response: Response): Promise<ResponseDetalleTutoriaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseDetalleTutoriaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDetalleTutoriaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    detalleTutoriaDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/DetalleTutoria/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetalleTutoriaDELETE(_response);
        });
    }

    protected processDetalleTutoriaDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    detallesByIdSesion(id: number): Promise<ResponseDetalleTutoriaDto[]> {
        let url_ = this.baseUrl + "/api/DetalleTutoria/DetallesByIdSesion/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetallesByIdSesion(_response);
        });
    }

    protected processDetallesByIdSesion(response: Response): Promise<ResponseDetalleTutoriaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseDetalleTutoriaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseDetalleTutoriaDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    programacionReservaObligatoriaPOST(body: ProgramacionReservaObligatoria | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProgramacionReservaObligatoriaPOST(_response);
        });
    }

    protected processProgramacionReservaObligatoriaPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    programacionReservaObligatoriaPUT(body: ProgramacionReservaObligatoria | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProgramacionReservaObligatoriaPUT(_response);
        });
    }

    protected processProgramacionReservaObligatoriaPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    programacionReservaObligatoriaAll(): Promise<ResponseProgramacionReservaObligatoriaDto[]> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria";
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProgramacionReservaObligatoriaAll(_response);
        });
    }

    protected processProgramacionReservaObligatoriaAll(response: Response): Promise<ResponseProgramacionReservaObligatoriaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseProgramacionReservaObligatoriaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseProgramacionReservaObligatoriaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    programacionReservaObligatoriaDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProgramacionReservaObligatoriaDELETE(_response);
        });
    }

    protected processProgramacionReservaObligatoriaDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    programacionReservaObligatoriaGET(id: number): Promise<ResponseProgramacionReservaObligatoriaDto> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProgramacionReservaObligatoriaGET(_response);
        });
    }

    protected processProgramacionReservaObligatoriaGET(response: Response): Promise<ResponseProgramacionReservaObligatoriaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseProgramacionReservaObligatoriaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseProgramacionReservaObligatoriaDto>(null as any);
    }

    /**
     * @return Success
     */
    listaActivosProgramacion(): Promise<ResponseProgramacionReservaObligatoriaDto[]> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria/ListaActivos";
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListaActivos(_response);
        });
    }

    protected processListaActivos(response: Response): Promise<ResponseProgramacionReservaObligatoriaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseProgramacionReservaObligatoriaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseProgramacionReservaObligatoriaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    programacionActivoByCodeTutor(id: string): Promise<ResponseProgramacionReservaObligatoriaDto> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria/ProgramacionActivoByCodeTutor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProgramacionActivoByCodeTutor(_response);
        });
    }

    protected processProgramacionActivoByCodeTutor(response: Response): Promise<ResponseProgramacionReservaObligatoriaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseProgramacionReservaObligatoriaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseProgramacionReservaObligatoriaDto>(null as any);
    }

    

    /**
     * @return Success
     */
    desactivarProgramacionByCodeTutor(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/ProgramacionReservaObligatoria/DesactivarByCodeTutor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivarByCodeTutor(_response);
        });
    }

    protected processDesactivarByCodeTutor(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reservaPOST(body: RequestReservaDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Reserva";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservaPOST(_response);
        });
    }

    protected processReservaPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reservaPUT(body: RequestReservaDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Reserva";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservaPUT(_response);
        });
    }

    protected processReservaPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    reservaAll(): Promise<ResponseReservaDto[]> {
        let url_ = this.baseUrl + "/api/Reserva";
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservaAll(_response);
        });
    }

    protected processReservaAll(response: Response): Promise<ResponseReservaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseReservaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseReservaDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reservaByIdHorarioHoraFecha(body: RequestReservaByIdHorarioHoraFechaDto | undefined): Promise<ResponseReservaDto> {
        let url_ = this.baseUrl + "/api/Reserva/ReservaByIdHorarioHoraFecha";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservaByIdHorarioHoraFecha(_response);
        });
    }

    protected processReservaByIdHorarioHoraFecha(response: Response): Promise<ResponseReservaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseReservaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseReservaDto>(null as any);
    }

    /**
     * @return Success
     */
    desactivarReservaVoluntarioByIdCarga(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Reserva/DesactivarReservaVoluntarioByIdCarga/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivarReservaVoluntarioByIdCarga(_response);
        });
    }

    protected processDesactivarReservaVoluntarioByIdCarga(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    reservaDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Reserva/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservaDELETE(_response);
        });
    }

    protected processReservaDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    reservaGET(id: number): Promise<ResponseReservaDto> {
        let url_ = this.baseUrl + "/api/Reserva/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservaGET(_response);
        });
    }

    protected processReservaGET(response: Response): Promise<ResponseReservaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseReservaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseReservaDto>(null as any);
    }

     /**
     * @return Success
     */
     reservaVoluntarioActivoByIdCarga(id: number): Promise<ResponseReservaDto> {
        let url_ = this.baseUrl + "/api/Reserva/reservaVoluntarioActivoByIdCarga/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservaVoluntarioActivoByIdCarga(_response);
        });
    }

    protected processReservaVoluntarioActivoByIdCarga(response: Response): Promise<ResponseReservaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseReservaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseReservaDto>(null as any);
    }


    /**
     * @param anioInicio (optional) 
     * @param mesInicio (optional) 
     * @param diaInicio (optional) 
     * @param anioLimite (optional) 
     * @param mesLimite (optional) 
     * @param diaLimite (optional) 
     * @return Success
     */
    reservasPorIntervaloFechaTipoVoluntario(anioInicio: number | undefined, mesInicio: number | undefined, diaInicio: number | undefined, anioLimite: number | undefined, mesLimite: number | undefined, diaLimite: number | undefined): Promise<ResponseReservaDto[]> {
        let url_ = this.baseUrl + "/api/Reserva/ReservasPorIntervaloFecha-TipoVoluntario?";
        if (anioInicio === null)
            throw new Error("The parameter 'anioInicio' cannot be null.");
        else if (anioInicio !== undefined)
            url_ += "anioInicio=" + encodeURIComponent("" + anioInicio) + "&";
        if (mesInicio === null)
            throw new Error("The parameter 'mesInicio' cannot be null.");
        else if (mesInicio !== undefined)
            url_ += "mesInicio=" + encodeURIComponent("" + mesInicio) + "&";
        if (diaInicio === null)
            throw new Error("The parameter 'diaInicio' cannot be null.");
        else if (diaInicio !== undefined)
            url_ += "diaInicio=" + encodeURIComponent("" + diaInicio) + "&";
        if (anioLimite === null)
            throw new Error("The parameter 'anioLimite' cannot be null.");
        else if (anioLimite !== undefined)
            url_ += "anioLimite=" + encodeURIComponent("" + anioLimite) + "&";
        if (mesLimite === null)
            throw new Error("The parameter 'mesLimite' cannot be null.");
        else if (mesLimite !== undefined)
            url_ += "mesLimite=" + encodeURIComponent("" + mesLimite) + "&";
        if (diaLimite === null)
            throw new Error("The parameter 'diaLimite' cannot be null.");
        else if (diaLimite !== undefined)
            url_ += "diaLimite=" + encodeURIComponent("" + diaLimite) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservasPorIntervaloFechaTipoVoluntario(_response);
        });
    }

    protected processReservasPorIntervaloFechaTipoVoluntario(response: Response): Promise<ResponseReservaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseReservaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseReservaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    reservasByIdProgramacion(id: number): Promise<ResponseReservaDto[]> {
        let url_ = this.baseUrl + "/api/Reserva/ReservasByIdProgramacion/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReservasByIdProgramacion(_response);
        });
    }

    protected processReservasByIdProgramacion(response: Response): Promise<ResponseReservaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseReservaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseReservaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    confirmarByIdReserva(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Reserva/ConfirmarByIdReserva/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfirmarByIdReserva(_response);
        });
    }

    protected processConfirmarByIdReserva(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    cancelarConfirmacionByIdReserva(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Reserva/CancelarConfirmacionByIdReserva/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelarConfirmacionByIdReserva(_response);
        });
    }

    protected processCancelarConfirmacionByIdReserva(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sesionTutoriaPOST(body: RequestSesionTutoriaDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/SesionTutoria";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSesionTutoriaPOST(_response);
        });
    }

    protected processSesionTutoriaPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sesionTutoriaPUT(body: RequestSesionTutoriaDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/SesionTutoria";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`,
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSesionTutoriaPUT(_response);
        });
    }

    protected processSesionTutoriaPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sesionTutoriaAll(): Promise<ResponseSesionTutoriaDto[]> {
        let url_ = this.baseUrl + "/api/SesionTutoria";
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSesionTutoriaAll(_response);
        });
    }

    protected processSesionTutoriaAll(response: Response): Promise<ResponseSesionTutoriaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseSesionTutoriaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseSesionTutoriaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    sesionTutoriaGET(id: number): Promise<ResponseSesionTutoriaDto> {
        let url_ = this.baseUrl + "/api/SesionTutoria/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSesionTutoriaGET(_response);
        });
    }

    protected processSesionTutoriaGET(response: Response): Promise<ResponseSesionTutoriaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseSesionTutoriaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseSesionTutoriaDto>(null as any);
    }

    /**
     * @return Success
     */
    sesionTutoriaDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/SesionTutoria/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSesionTutoriaDELETE(_response);
        });
    }

    protected processSesionTutoriaDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sesionByIdReserva(id: number): Promise<ResponseSesionTutoriaDto> {
        let url_ = this.baseUrl + "/api/SesionTutoria/SesionByIdReserva/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSesionByIdReserva(_response);
        });
    }

    protected processSesionByIdReserva(response: Response): Promise<ResponseSesionTutoriaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseSesionTutoriaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseSesionTutoriaDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tutorHorarioDisponiblePOST(body: TutorHorarioDisponible | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorHorarioDisponiblePOST(_response);
        });
    }

    protected processTutorHorarioDisponiblePOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tutorHorarioDisponiblePUT(body: TutorHorarioDisponible | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorHorarioDisponiblePUT(_response);
        });
    }

    protected processTutorHorarioDisponiblePUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    tutorHorarioDisponibleAll(): Promise<ResponseTutorHorarioDisponibleDto[]> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible";
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorHorarioDisponibleAll(_response);
        });
    }

    protected processTutorHorarioDisponibleAll(response: Response): Promise<ResponseTutorHorarioDisponibleDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseTutorHorarioDisponibleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseTutorHorarioDisponibleDto[]>(null as any);
    }

    /**
     * @return Success
     */
    tutorHorarioDisponibleDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorHorarioDisponibleDELETE(_response);
        });
    }

    protected processTutorHorarioDisponibleDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    tutorHorarioDisponibleGET(id: number): Promise<ResponseTutorHorarioDisponibleDto> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorHorarioDisponibleGET(_response);
        });
    }

    protected processTutorHorarioDisponibleGET(response: Response): Promise<ResponseTutorHorarioDisponibleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseTutorHorarioDisponibleDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseTutorHorarioDisponibleDto>(null as any);
    }

    /**
     * @return Success
     */
    listaHorariosByCodeTutor(id: string): Promise<ResponseTutorHorarioDisponibleDto[]> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible/ListaHorariosByCodeTutor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListaHorariosByCodeTutor(_response);
        });
    }

    protected processListaHorariosByCodeTutor(response: Response): Promise<ResponseTutorHorarioDisponibleDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseTutorHorarioDisponibleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseTutorHorarioDisponibleDto[]>(null as any);
    }

    /**
     * @param idTutor (optional) 
     * @param dia (optional) 
     * @param hora (optional) 
     * @return Success
     */
    horarioByCodeTutorFechaHora(idTutor: string | undefined, dia: string | undefined, hora: string | undefined): Promise<ResponseTutorHorarioDisponibleDto> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible/HorarioByCodeTutorFechaHora?";
        if (idTutor === null)
            throw new Error("The parameter 'idTutor' cannot be null.");
        else if (idTutor !== undefined)
            url_ += "idTutor=" + encodeURIComponent("" + idTutor) + "&";
        if (dia === null)
            throw new Error("The parameter 'dia' cannot be null.");
        else if (dia !== undefined)
            url_ += "Dia=" + encodeURIComponent("" + dia) + "&";
        if (hora === null)
            throw new Error("The parameter 'hora' cannot be null.");
        else if (hora !== undefined)
            url_ += "Hora=" + encodeURIComponent("" + hora) + "&";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHorarioByCodeTutorFechaHora(_response);
        });
    }

    protected processHorarioByCodeTutorFechaHora(response: Response): Promise<ResponseTutorHorarioDisponibleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseTutorHorarioDisponibleDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseTutorHorarioDisponibleDto>(null as any);
    }

    /**
     * @return Success
     */
    desactivarHorarios(): Promise<void> {
        let url_ = this.baseUrl + "/api/TutorHorarioDisponible/DesactivarHorarios";
        url_ = url_.replace(/[?&]$/, "");

        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivarHorarios(_response);
        });
    }

    protected processDesactivarHorarios(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}
export enum Dimension {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum EstadoConfirmacion {
    _0 = 0,
    _1 = 1,
}

export class ProgramacionReservaObligatoria implements IProgramacionReservaObligatoria {
    idProgramacion?: number;
    idTutor!: string;
    duracion?: number;
    totalBloques?: number;
    tipo?: TipoReunion;
    fechaInicio?: Date;
    fechaFin?: Date;
    activo?: boolean;

    constructor(data?: IProgramacionReservaObligatoria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idProgramacion = _data["idProgramacion"];
            this.idTutor = _data["idTutor"];
            this.duracion = _data["duracion"];
            this.totalBloques = _data["totalBloques"];
            this.tipo = _data["tipo"];
            this.fechaInicio = _data["fechaInicio"] ? new Date(_data["fechaInicio"].toString()) : <any>undefined;
            this.fechaFin = _data["fechaFin"] ? new Date(_data["fechaFin"].toString()) : <any>undefined;
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): ProgramacionReservaObligatoria {
        data = typeof data === 'object' ? data : {};
        let result = new ProgramacionReservaObligatoria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idProgramacion"] = this.idProgramacion;
        data["idTutor"] = this.idTutor;
        data["duracion"] = this.duracion;
        data["totalBloques"] = this.totalBloques;
        data["tipo"] = this.tipo;
        data["fechaInicio"] = this.fechaInicio ? formatDate(this.fechaInicio) : <any>undefined;
        data["fechaFin"] = this.fechaFin ? formatDate(this.fechaFin) : <any>undefined;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IProgramacionReservaObligatoria {
    idProgramacion?: number;
    idTutor: string;
    duracion?: number;
    totalBloques?: number;
    tipo?: TipoReunion;
    fechaInicio?: Date;
    fechaFin?: Date;
    activo?: boolean;
}


export class RequestDetalleProgramacionDto implements IRequestDetalleProgramacionDto {
    idDetalleProgramacionReservaObligatoria?: number;
    idProgramacion?: number;
    nroBloque?: number;
    fecha?: Date;
    horaInicioSesionTutoria?: string;
    activo?: boolean;

    constructor(data?: IRequestDetalleProgramacionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDetalleProgramacionReservaObligatoria = _data["idDetalleProgramacionReservaObligatoria"];
            this.idProgramacion = _data["idProgramacion"];
            this.nroBloque = _data["nroBloque"];
            this.fecha = _data["fecha"] ? new Date(_data["fecha"].toString()) : <any>undefined;
            this.horaInicioSesionTutoria = _data["horaInicioSesionTutoria"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): RequestDetalleProgramacionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDetalleProgramacionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDetalleProgramacionReservaObligatoria"] = this.idDetalleProgramacionReservaObligatoria;
        data["idProgramacion"] = this.idProgramacion;
        data["nroBloque"] = this.nroBloque;
        data["fecha"] = this.fecha ? formatDate(this.fecha) : <any>undefined;
        data["horaInicioSesionTutoria"] = this.horaInicioSesionTutoria;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IRequestDetalleProgramacionDto {
    idDetalleProgramacionReservaObligatoria?: number;
    idProgramacion?: number;
    nroBloque?: number;
    fecha?: Date;
    horaInicioSesionTutoria?: string;
    activo?: boolean;
}

export class RequestDetalleTutoriaDto implements IRequestDetalleTutoriaDto {
    idDetalleSesionTutoria?: number;
    idSesionTutoria?: number;
    dimension?: Dimension;
    descripcion?: string | undefined;
    referencia?: string | undefined;
    observaciones?: string | undefined;

    constructor(data?: IRequestDetalleTutoriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDetalleSesionTutoria = _data["idDetalleSesionTutoria"];
            this.idSesionTutoria = _data["idSesionTutoria"];
            this.dimension = _data["dimension"];
            this.descripcion = _data["descripcion"];
            this.referencia = _data["referencia"];
            this.observaciones = _data["observaciones"];
        }
    }

    static fromJS(data: any): RequestDetalleTutoriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDetalleTutoriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDetalleSesionTutoria"] = this.idDetalleSesionTutoria;
        data["idSesionTutoria"] = this.idSesionTutoria;
        data["dimension"] = this.dimension;
        data["descripcion"] = this.descripcion;
        data["referencia"] = this.referencia;
        data["observaciones"] = this.observaciones;
        return data;
    }
}

export interface IRequestDetalleTutoriaDto {
    idDetalleSesionTutoria?: number;
    idSesionTutoria?: number;
    dimension?: Dimension;
    descripcion?: string | undefined;
    referencia?: string | undefined;
    observaciones?: string | undefined;
}

export class RequestReservaByIdHorarioHoraFechaDto implements IRequestReservaByIdHorarioHoraFechaDto {
    idTutorHorarioDisponible?: number;
    hora?: string;
    fecha?: Date;

    constructor(data?: IRequestReservaByIdHorarioHoraFechaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idTutorHorarioDisponible = _data["idTutorHorarioDisponible"];
            this.hora = _data["hora"];
            this.fecha = _data["fecha"] ? new Date(_data["fecha"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestReservaByIdHorarioHoraFechaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestReservaByIdHorarioHoraFechaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idTutorHorarioDisponible"] = this.idTutorHorarioDisponible;
        data["hora"] = this.hora;
        data["fecha"] = this.fecha ? formatDate(this.fecha) : <any>undefined;
        return data;
    }
}

export interface IRequestReservaByIdHorarioHoraFechaDto {
    idTutorHorarioDisponible?: number;
    hora?: string;
    fecha?: Date;
}


export class RequestReservaDto implements IRequestReservaDto {
    idReserva?: number;
    idCargaTutoria?: number;
    idProgramacionReservaObligatoria?: number | undefined;
    idTutorHorarioDisponible?: number | undefined;
    fecha?: Date;
    horaTutoria?: string;
    tipoReunion?: TipoReunion;
    tipoReserva?: TipoReserva;
    estadoConfirmacion?: EstadoConfirmacion;
    enlaceReunion?: string | undefined;
    lugarReunion?: string | undefined;
    activo?: boolean;

    constructor(data?: IRequestReservaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReserva = _data["idReserva"];
            this.idCargaTutoria = _data["idCargaTutoria"];
            this.idProgramacionReservaObligatoria = _data["idProgramacionReservaObligatoria"];
            this.idTutorHorarioDisponible = _data["idTutorHorarioDisponible"];
            this.fecha = _data["fecha"] ? new Date(_data["fecha"].toString()) : <any>undefined;
            this.horaTutoria = _data["horaTutoria"];
            this.tipoReunion = _data["tipoReunion"];
            this.tipoReserva = _data["tipoReserva"];
            this.estadoConfirmacion = _data["estadoConfirmacion"];
            this.enlaceReunion = _data["enlaceReunion"];
            this.lugarReunion = _data["lugarReunion"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): RequestReservaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestReservaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReserva"] = this.idReserva;
        data["idCargaTutoria"] = this.idCargaTutoria;
        data["idProgramacionReservaObligatoria"] = this.idProgramacionReservaObligatoria;
        data["idTutorHorarioDisponible"] = this.idTutorHorarioDisponible;
        data["fecha"] = this.fecha ? formatDate(this.fecha) : <any>undefined;
        data["horaTutoria"] = this.horaTutoria;
        data["tipoReunion"] = this.tipoReunion;
        data["tipoReserva"] = this.tipoReserva;
        data["estadoConfirmacion"] = this.estadoConfirmacion;
        data["enlaceReunion"] = this.enlaceReunion;
        data["lugarReunion"] = this.lugarReunion;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IRequestReservaDto {
    idReserva?: number;
    idCargaTutoria?: number;
    idProgramacionReservaObligatoria?: number | undefined;
    idTutorHorarioDisponible?: number | undefined;
    fecha?: Date;
    horaTutoria?: string;
    tipoReunion?: TipoReunion;
    tipoReserva?: TipoReserva;
    estadoConfirmacion?: EstadoConfirmacion;
    enlaceReunion?: string | undefined;
    lugarReunion?: string | undefined;
    activo?: boolean;
}




export class RequestSesionTutoriaDto implements IRequestSesionTutoriaDto {
    idSesionTutoria?: number;
    idReserva?: number;
    idTutorado?: string | undefined;
    idTutor?: string | undefined;
    idSemestre?: number;
    fechaReunion?: Date;
    hora?: string;

    constructor(data?: IRequestSesionTutoriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSesionTutoria = _data["idSesionTutoria"];
            this.idReserva = _data["idReserva"];
            this.idTutorado = _data["idTutorado"];
            this.idTutor = _data["idTutor"];
            this.idSemestre = _data["idSemestre"];
            this.fechaReunion = _data["fechaReunion"] ? new Date(_data["fechaReunion"].toString()) : <any>undefined;
            this.hora = _data["hora"];
        }
    }

    static fromJS(data: any): RequestSesionTutoriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestSesionTutoriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSesionTutoria"] = this.idSesionTutoria;
        data["idReserva"] = this.idReserva;
        data["idTutorado"] = this.idTutorado;
        data["idTutor"] = this.idTutor;
        data["idSemestre"] = this.idSemestre;
        data["fechaReunion"] = this.fechaReunion ? formatDate(this.fechaReunion) : <any>undefined;
        data["hora"] = this.hora;
        return data;
    }
}

export interface IRequestSesionTutoriaDto {
    idSesionTutoria?: number;
    idReserva?: number;
    idTutorado?: string | undefined;
    idTutor?: string | undefined;
    idSemestre?: number;
    fechaReunion?: Date;
    hora?: string;
}


export class ResponseDetalleProgramacionDto implements IResponseDetalleProgramacionDto {
    idDetalleProgramacionReservaObligatoria?: number;
    idProgramacion?: number;
    nroBloque?: number;
    fecha?: Date;
    horaInicioSesionTutoria?: string;
    activo?: boolean;

    constructor(data?: IResponseDetalleProgramacionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDetalleProgramacionReservaObligatoria = _data["idDetalleProgramacionReservaObligatoria"];
            this.idProgramacion = _data["idProgramacion"];
            this.nroBloque = _data["nroBloque"];
            this.fecha = _data["fecha"] ? new Date(_data["fecha"].toString()) : <any>undefined;
            this.horaInicioSesionTutoria = _data["horaInicioSesionTutoria"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): ResponseDetalleProgramacionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseDetalleProgramacionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDetalleProgramacionReservaObligatoria"] = this.idDetalleProgramacionReservaObligatoria;
        data["idProgramacion"] = this.idProgramacion;
        data["nroBloque"] = this.nroBloque;
        data["fecha"] = this.fecha ? formatDate(this.fecha) : <any>undefined;
        data["horaInicioSesionTutoria"] = this.horaInicioSesionTutoria;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IResponseDetalleProgramacionDto {
    idDetalleProgramacionReservaObligatoria?: number;
    idProgramacion?: number;
    nroBloque?: number;
    fecha?: Date;
    horaInicioSesionTutoria?: string;
    activo?: boolean;
}

export class ResponseDetalleTutoriaDto implements IResponseDetalleTutoriaDto {
    idDetalleSesionTutoria?: number;
    idSesionTutoria?: number;
    dimension?: string | undefined;
    descripcion?: string | undefined;
    referencia?: string | undefined;
    observaciones?: string | undefined;

    constructor(data?: IResponseDetalleTutoriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDetalleSesionTutoria = _data["idDetalleSesionTutoria"];
            this.idSesionTutoria = _data["idSesionTutoria"];
            this.dimension = _data["dimension"];
            this.descripcion = _data["descripcion"];
            this.referencia = _data["referencia"];
            this.observaciones = _data["observaciones"];
        }
    }

    static fromJS(data: any): ResponseDetalleTutoriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseDetalleTutoriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDetalleSesionTutoria"] = this.idDetalleSesionTutoria;
        data["idSesionTutoria"] = this.idSesionTutoria;
        data["dimension"] = this.dimension;
        data["descripcion"] = this.descripcion;
        data["referencia"] = this.referencia;
        data["observaciones"] = this.observaciones;
        return data;
    }
}

export interface IResponseDetalleTutoriaDto {
    idDetalleSesionTutoria?: number;
    idSesionTutoria?: number;
    dimension?: string | undefined;
    descripcion?: string | undefined;
    referencia?: string | undefined;
    observaciones?: string | undefined;
}

export class ResponseProgramacionReservaObligatoriaDto implements IResponseProgramacionReservaObligatoriaDto {
    idProgramacion?: number;
    idTutor?: string | undefined;
    duracion?: number;
    totalBloques?: number;
    tipo?: string | undefined;
    fechaInicio?: Date;
    fechaFin?: Date;
    activo?: boolean;

    constructor(data?: IResponseProgramacionReservaObligatoriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idProgramacion = _data["idProgramacion"];
            this.idTutor = _data["idTutor"];
            this.duracion = _data["duracion"];
            this.totalBloques = _data["totalBloques"];
            this.tipo = _data["tipo"];
            this.fechaInicio = _data["fechaInicio"] ? new Date(_data["fechaInicio"].toString()) : <any>undefined;
            this.fechaFin = _data["fechaFin"] ? new Date(_data["fechaFin"].toString()) : <any>undefined;
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): ResponseProgramacionReservaObligatoriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseProgramacionReservaObligatoriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idProgramacion"] = this.idProgramacion;
        data["idTutor"] = this.idTutor;
        data["duracion"] = this.duracion;
        data["totalBloques"] = this.totalBloques;
        data["tipo"] = this.tipo;
        data["fechaInicio"] = this.fechaInicio ? formatDate(this.fechaInicio) : <any>undefined;
        data["fechaFin"] = this.fechaFin ? formatDate(this.fechaFin) : <any>undefined;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IResponseProgramacionReservaObligatoriaDto {
    idProgramacion?: number;
    idTutor?: string | undefined;
    duracion?: number;
    totalBloques?: number;
    tipo?: string | undefined;
    fechaInicio?: Date;
    fechaFin?: Date;
    activo?: boolean;
}

export class ResponseReservaDto implements IResponseReservaDto {
    idReserva?: number;
    idCargaTutoria?: number;
    idProgramacionReservaObligatoria?: number | undefined;
    idTutorHorarioDisponible?: number | undefined;
    fecha?: Date;
    horaTutoria?: string;
    tipoReunion?: string | undefined;
    tipoReserva?: string | undefined;
    estadoConfirmacion?: string | undefined;
    enlaceReunion?: string | undefined;
    lugarReunion?: string | undefined;
    activo?: boolean;

    constructor(data?: IResponseReservaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReserva = _data["idReserva"];
            this.idCargaTutoria = _data["idCargaTutoria"];
            this.idProgramacionReservaObligatoria = _data["idProgramacionReservaObligatoria"];
            this.idTutorHorarioDisponible = _data["idTutorHorarioDisponible"];
            this.fecha = _data["fecha"] ? new Date(_data["fecha"].toString()) : <any>undefined;
            this.horaTutoria = _data["horaTutoria"];
            this.tipoReunion = _data["tipoReunion"];
            this.tipoReserva = _data["tipoReserva"];
            this.estadoConfirmacion = _data["estadoConfirmacion"];
            this.enlaceReunion = _data["enlaceReunion"];
            this.lugarReunion = _data["lugarReunion"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): ResponseReservaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseReservaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReserva"] = this.idReserva;
        data["idCargaTutoria"] = this.idCargaTutoria;
        data["idProgramacionReservaObligatoria"] = this.idProgramacionReservaObligatoria;
        data["idTutorHorarioDisponible"] = this.idTutorHorarioDisponible;
        data["fecha"] = this.fecha ? formatDate(this.fecha) : <any>undefined;
        data["horaTutoria"] = this.horaTutoria;
        data["tipoReunion"] = this.tipoReunion;
        data["tipoReserva"] = this.tipoReserva;
        data["estadoConfirmacion"] = this.estadoConfirmacion;
        data["enlaceReunion"] = this.enlaceReunion;
        data["lugarReunion"] = this.lugarReunion;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IResponseReservaDto {
    idReserva?: number;
    idCargaTutoria?: number;
    idProgramacionReservaObligatoria?: number | undefined;
    idTutorHorarioDisponible?: number | undefined;
    fecha?: Date;
    horaTutoria?: string;
    tipoReunion?: string | undefined;
    tipoReserva?: string | undefined;
    estadoConfirmacion?: string | undefined;
    enlaceReunion?: string | undefined;
    lugarReunion?: string | undefined;
    activo?: boolean;
}

export class ResponseSesionTutoriaDto implements IResponseSesionTutoriaDto {
    idSesionTutoria?: number;
    idReserva?: number;
    idTutorado?: string | undefined;
    idTutor?: string | undefined;
    idSemestre?: number;
    fechaReunion?: Date;
    hora?: string;

    constructor(data?: IResponseSesionTutoriaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSesionTutoria = _data["idSesionTutoria"];
            this.idReserva = _data["idReserva"];
            this.idTutorado = _data["idTutorado"];
            this.idTutor = _data["idTutor"];
            this.idSemestre = _data["idSemestre"];
            this.fechaReunion = _data["fechaReunion"] ? new Date(_data["fechaReunion"].toString()) : <any>undefined;
            this.hora = _data["hora"];
        }
    }

    static fromJS(data: any): ResponseSesionTutoriaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseSesionTutoriaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSesionTutoria"] = this.idSesionTutoria;
        data["idReserva"] = this.idReserva;
        data["idTutorado"] = this.idTutorado;
        data["idTutor"] = this.idTutor;
        data["idSemestre"] = this.idSemestre;
        data["fechaReunion"] = this.fechaReunion ? formatDate(this.fechaReunion) : <any>undefined;
        data["hora"] = this.hora;
        return data;
    }
}

export interface IResponseSesionTutoriaDto {
    idSesionTutoria?: number;
    idReserva?: number;
    idTutorado?: string | undefined;
    idTutor?: string | undefined;
    idSemestre?: number;
    fechaReunion?: Date;
    hora?: string;
}

export class ResponseTutorHorarioDisponibleDto implements IResponseTutorHorarioDisponibleDto {
    idHorario?: number;
    idTutor?: string | undefined;
    hora?: string;
    duracion?: number;
    dia?: string | undefined;
    tipo?: string | undefined;
    activo?: boolean;

    constructor(data?: IResponseTutorHorarioDisponibleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idHorario = _data["idHorario"];
            this.idTutor = _data["idTutor"];
            this.hora = _data["hora"];
            this.duracion = _data["duracion"];
            this.dia = _data["dia"];
            this.tipo = _data["tipo"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): ResponseTutorHorarioDisponibleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseTutorHorarioDisponibleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idHorario"] = this.idHorario;
        data["idTutor"] = this.idTutor;
        data["hora"] = this.hora;
        data["duracion"] = this.duracion;
        data["dia"] = this.dia;
        data["tipo"] = this.tipo;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IResponseTutorHorarioDisponibleDto {
    idHorario?: number;
    idTutor?: string | undefined;
    hora?: string;
    duracion?: number;
    dia?: string | undefined;
    tipo?: string | undefined;
    activo?: boolean;
}

export enum TipoReserva {
    _0 = 0,
    _1 = 1,
}

export enum TipoReunion {
    _0 = 0,
    _1 = 1,
}

export class TutorHorarioDisponible implements ITutorHorarioDisponible {
    idHorario?: number;
    idTutor!: string;
    hora?: string;
    duracion?: number;
    dia?: string | undefined;
    tipo?: TipoReunion;
    activo?: boolean;

    constructor(data?: ITutorHorarioDisponible) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idHorario = _data["idHorario"];
            this.idTutor = _data["idTutor"];
            this.hora = _data["hora"];
            this.duracion = _data["duracion"];
            this.dia = _data["dia"];
            this.tipo = _data["tipo"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): TutorHorarioDisponible {
        data = typeof data === 'object' ? data : {};
        let result = new TutorHorarioDisponible();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idHorario"] = this.idHorario;
        data["idTutor"] = this.idTutor;
        data["hora"] = this.hora;
        data["duracion"] = this.duracion;
        data["dia"] = this.dia;
        data["tipo"] = this.tipo;
        data["activo"] = this.activo;
        return data;
    }
}

export interface ITutorHorarioDisponible {
    idHorario?: number;
    idTutor: string;
    hora?: string;
    duracion?: number;
    dia?: string | undefined;
    tipo?: TipoReunion;
    activo?: boolean;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}