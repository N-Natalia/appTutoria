//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { environment } from "src/environments/environment";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ConfiguracionAcademicaService {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = environment.baseUrl;
        
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    administradorPOST(body: Administrador | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Administrador";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdministradorPOST(_response);
        });
    }

    protected processAdministradorPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    administradorAll(): Promise<Administrador[]> {
        let url_ = this.baseUrl + "/api/Administrador";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdministradorAll(_response);
        });
    }

    protected processAdministradorAll(response: Response): Promise<Administrador[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Administrador.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Administrador[]>(null as any);
    }

    /**
     * @return Success
     */
    administradorGET(id: string): Promise<Administrador> {
        let url_ = this.baseUrl + "/api/Administrador/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdministradorGET(_response);
        });
    }

    protected processAdministradorGET(response: Response): Promise<Administrador> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Administrador.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Administrador>(null as any);
    }

    /**
     * @return Success
     */
    administradorDELETE(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Administrador/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdministradorDELETE(_response);
        });
    }

    protected processAdministradorDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    desactivarAdministrador(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Administrador/Desactivar/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivar(_response);
        });
    }

    protected processDesactivar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    activarAdministrador(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Administrador/Activar/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivar(_response);
        });
    }

    protected processActivar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cargaTutoriaPOST(body: RequestCargaDto | undefined): Promise<Semestre> {
        let url_ = this.baseUrl + "/api/CargaTutoria";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCargaTutoriaPOST(_response);
        });
    }

    protected processCargaTutoriaPOST(response: Response): Promise<Semestre> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Semestre.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Semestre>(null as any);
    }

    /**
     * @return Success
     */
    cargaTutoriaAll(): Promise<RequestCargaDto[]> {
        let url_ = this.baseUrl + "/api/CargaTutoria";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCargaTutoriaAll(_response);
        });
    }

    protected processCargaTutoriaAll(response: Response): Promise<RequestCargaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RequestCargaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RequestCargaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    cargaTutoriaGET(id: number): Promise<CargaTutoria> {
        let url_ = this.baseUrl + "/api/CargaTutoria/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCargaTutoriaGET(_response);
        });
    }

    protected processCargaTutoriaGET(response: Response): Promise<CargaTutoria> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CargaTutoria.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CargaTutoria>(null as any);
    }

    /**
     * @return Success
     */
    cargaTutoriaDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CargaTutoria/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCargaTutoriaDELETE(_response);
        });
    }

    protected processCargaTutoriaDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    listaActivosCargaTutoria(): Promise<RequestCargaDto[]> {
        let url_ = this.baseUrl + "/api/CargaTutoria/Lista-Activos";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processListaActivos(_response);
        });
    }

    protected processListaActivos(response: Response): Promise<RequestCargaDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RequestCargaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RequestCargaDto[]>(null as any);
    }

    /**
     * @return Success
     */
    codeTutoradosByCodeTutorCargaTutoria(id: string): Promise<ResponseListCodeTutoradosByCodeTutorDto[]> {
        let url_ = this.baseUrl + "/api/CargaTutoria/CodeTutoradosByCodeTutor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCodeTutoradosByCodeTutor(_response);
        });
    }

    protected processCodeTutoradosByCodeTutor(response: Response): Promise<ResponseListCodeTutoradosByCodeTutorDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ResponseListCodeTutoradosByCodeTutorDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseListCodeTutoradosByCodeTutorDto[]>(null as any);
    }

    /**
     * @return Success
     */
    codeTutorByCodeTutoradoCargaTutoria(id: string): Promise<ResponseCodeTutorDto> {
        let url_ = this.baseUrl + "/api/CargaTutoria/CodeTutorByCodeTutorado/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCodeTutorByCodeTutorado(_response);
        });
    }

    protected processCodeTutorByCodeTutorado(response: Response): Promise<ResponseCodeTutorDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseCodeTutorDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseCodeTutorDto>(null as any);
    }

    /**
     * @return Success
     */
    idCargaByCodeTutorado(id: string): Promise<ResponseIdCargaDto> {
        let url_ = this.baseUrl + "/api/CargaTutoria/IdCargaByCodeTutorado/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIdCargaByCodeTutorado(_response);
        });
    }

    protected processIdCargaByCodeTutorado(response: Response): Promise<ResponseIdCargaDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseIdCargaDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseIdCargaDto>(null as any);
    }

    /**
     * @return Success
     */
    codeTutoradoByIdCarga(id: number): Promise<ResponseCodeTutoradoDto> {
        let url_ = this.baseUrl + "/api/CargaTutoria/CodeTutoradoByIdCarga/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCodeTutoradoByIdCarga(_response);
        });
    }

    protected processCodeTutoradoByIdCarga(response: Response): Promise<ResponseCodeTutoradoDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResponseCodeTutoradoDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResponseCodeTutoradoDto>(null as any);
    }

    /**
     * @return Success
     */
    desactivarCarga(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CargaTutoria/Desactivar/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivar2(_response);
        });
    }

    protected processDesactivar2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    desactivarCargas(): Promise<void> {
        let url_ = this.baseUrl + "/api/CargaTutoria/DesactivarCargas";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivarCargas(_response);
        });
    }

    protected processDesactivarCargas(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    semestrePOST(body: Semestre | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Semestre";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSemestrePOST(_response);
        });
    }

    protected processSemestrePOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    semestreAll(): Promise<Semestre[]> {
        let url_ = this.baseUrl + "/api/Semestre";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSemestreAll(_response);
        });
    }

    protected processSemestreAll(response: Response): Promise<Semestre[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Semestre.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Semestre[]>(null as any);
    }

    /**
     * @return Success
     */
    semestreDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Semestre/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSemestreDELETE(_response);
        });
    }

    protected processSemestreDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    semestreGET(id: number): Promise<Semestre> {
        let url_ = this.baseUrl + "/api/Semestre/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSemestreGET(_response);
        });
    }

    protected processSemestreGET(response: Response): Promise<Semestre> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Semestre.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Semestre>(null as any);
    }

    /**
     * @return Success
     */
    semestreActivo(): Promise<Semestre> {
        let url_ = this.baseUrl + "/api/Semestre/Semestre-Activo";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSemestreActivo(_response);
        });
    }

    protected processSemestreActivo(response: Response): Promise<Semestre> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Semestre.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Semestre>(null as any);
    }

    /**
     * @return Success
     */
    desactivarSemestre(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Semestre/Desactivar/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "PUT",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDesactivar3(_response);
        });
    }

    protected processDesactivar3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tutorPOST(body: Tutor | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Tutor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorPOST(_response);
        });
    }

    protected processTutorPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    tutorAll(): Promise<Tutor[]> {
        let url_ = this.baseUrl + "/api/Tutor";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorAll(_response);
        });
    }

    protected processTutorAll(response: Response): Promise<Tutor[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Tutor.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Tutor[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tutorPUT(body: Tutor | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Tutor";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorPUT(_response);
        });
    }

    protected processTutorPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    tutorGET(id: string): Promise<Tutor> {
        let url_ = this.baseUrl + "/api/Tutor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorGET(_response);
        });
    }

    protected processTutorGET(response: Response): Promise<Tutor> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Tutor.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Tutor>(null as any);
    }

    /**
     * @return Success
     */
    tutorDELETE(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Tutor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutorDELETE(_response);
        });
    }

    protected processTutorDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tutoradoPOST(body: Tutorado | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Tutorado";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutoradoPOST(_response);
        });
    }

    protected processTutoradoPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    tutoradoAll(): Promise<Tutorado[]> {
        let url_ = this.baseUrl + "/api/Tutorado";
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutoradoAll(_response);
        });
    }

    protected processTutoradoAll(response: Response): Promise<Tutorado[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Tutorado.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Tutorado[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tutoradoPUT(body: Tutorado | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Tutorado";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutoradoPUT(_response);
        });
    }

    protected processTutoradoPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    tutoradoGET(id: string): Promise<Tutorado> {
        let url_ = this.baseUrl + "/api/Tutorado/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain",
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutoradoGET(_response);
        });
    }

    protected processTutoradoGET(response: Response): Promise<Tutorado> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Tutorado.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Tutorado>(null as any);
    }

    /**
     * @return Success
     */
    tutoradoDELETE(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Tutorado/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const token = localStorage.getItem('token');
        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTutoradoDELETE(_response);
        });
    }

    protected processTutoradoDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Administrador implements IAdministrador {
    code?: string | undefined;
    nombres?: string | undefined;
    apPaterno?: string | undefined;
    apMaterno?: string | undefined;
    email?: string | undefined;
    activo?: boolean;

    constructor(data?: IAdministrador) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.nombres = _data["nombres"];
            this.apPaterno = _data["apPaterno"];
            this.apMaterno = _data["apMaterno"];
            this.email = _data["email"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): Administrador {
        data = typeof data === 'object' ? data : {};
        let result = new Administrador();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["nombres"] = this.nombres;
        data["apPaterno"] = this.apPaterno;
        data["apMaterno"] = this.apMaterno;
        data["email"] = this.email;
        data["activo"] = this.activo;
        return data;
    }
}

export interface IAdministrador {
    code?: string | undefined;
    nombres?: string | undefined;
    apPaterno?: string | undefined;
    apMaterno?: string | undefined;
    email?: string | undefined;
    activo?: boolean;
}

export class CargaTutoria implements ICargaTutoria {
    idCargaTutoria?: number;
    idTutor?: string | undefined;
    tutor?: Tutor;
    idTutorado?: string | undefined;
    tutorado?: Tutorado;
    idSemestre?: number;
    semestre?: Semestre;
    estado?: boolean;

    constructor(data?: ICargaTutoria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idCargaTutoria = _data["idCargaTutoria"];
            this.idTutor = _data["idTutor"];
            this.tutor = _data["tutor"] ? Tutor.fromJS(_data["tutor"]) : <any>undefined;
            this.idTutorado = _data["idTutorado"];
            this.tutorado = _data["tutorado"] ? Tutorado.fromJS(_data["tutorado"]) : <any>undefined;
            this.idSemestre = _data["idSemestre"];
            this.semestre = _data["semestre"] ? Semestre.fromJS(_data["semestre"]) : <any>undefined;
            this.estado = _data["estado"];
        }
    }

    static fromJS(data: any): CargaTutoria {
        data = typeof data === 'object' ? data : {};
        let result = new CargaTutoria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idCargaTutoria"] = this.idCargaTutoria;
        data["idTutor"] = this.idTutor;
        data["tutor"] = this.tutor ? this.tutor.toJSON() : <any>undefined;
        data["idTutorado"] = this.idTutorado;
        data["tutorado"] = this.tutorado ? this.tutorado.toJSON() : <any>undefined;
        data["idSemestre"] = this.idSemestre;
        data["semestre"] = this.semestre ? this.semestre.toJSON() : <any>undefined;
        data["estado"] = this.estado;
        return data;
    }
}

export interface ICargaTutoria {
    idCargaTutoria?: number;
    idTutor?: string | undefined;
    tutor?: Tutor;
    idTutorado?: string | undefined;
    tutorado?: Tutorado;
    idSemestre?: number;
    semestre?: Semestre;
    estado?: boolean;
}

export class RequestCargaDto implements IRequestCargaDto {
    idTutor?: string | undefined;
    idTutorado?: string | undefined;
    idSemestre?: number;
    estado?: boolean;

    constructor(data?: IRequestCargaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idTutor = _data["idTutor"];
            this.idTutorado = _data["idTutorado"];
            this.idSemestre = _data["idSemestre"];
            this.estado = _data["estado"];
        }
    }

    static fromJS(data: any): RequestCargaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestCargaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idTutor"] = this.idTutor;
        data["idTutorado"] = this.idTutorado;
        data["idSemestre"] = this.idSemestre;
        data["estado"] = this.estado;
        return data;
    }
}

export interface IRequestCargaDto {
    idTutor?: string | undefined;
    idTutorado?: string | undefined;
    idSemestre?: number;
    estado?: boolean;
}

export class ResponseCodeTutorDto implements IResponseCodeTutorDto {
    codeTutor?: string | undefined;

    constructor(data?: IResponseCodeTutorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.codeTutor = _data["codeTutor"];
        }
    }

    static fromJS(data: any): ResponseCodeTutorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseCodeTutorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codeTutor"] = this.codeTutor;
        return data;
    }
}

export interface IResponseCodeTutorDto {
    codeTutor?: string | undefined;
}

export class ResponseCodeTutoradoDto implements IResponseCodeTutoradoDto {
    codeTutorado?: string | undefined;

    constructor(data?: IResponseCodeTutoradoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.codeTutorado = _data["codeTutorado"];
        }
    }

    static fromJS(data: any): ResponseCodeTutoradoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseCodeTutoradoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["codeTutorado"] = this.codeTutorado;
        return data;
    }
}

export interface IResponseCodeTutoradoDto {
    codeTutorado?: string | undefined;
}

export class ResponseIdCargaDto implements IResponseIdCargaDto {
    idCarga?: number;

    constructor(data?: IResponseIdCargaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idCarga = _data["idCarga"];
        }
    }

    static fromJS(data: any): ResponseIdCargaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseIdCargaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idCarga"] = this.idCarga;
        return data;
    }
}

export interface IResponseIdCargaDto {
    idCarga?: number;
}

export class ResponseListCodeTutoradosByCodeTutorDto implements IResponseListCodeTutoradosByCodeTutorDto {
    idTutorado?: string | undefined;

    constructor(data?: IResponseListCodeTutoradosByCodeTutorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idTutorado = _data["idTutorado"];
        }
    }

    static fromJS(data: any): ResponseListCodeTutoradosByCodeTutorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseListCodeTutoradosByCodeTutorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idTutorado"] = this.idTutorado;
        return data;
    }
}

export interface IResponseListCodeTutoradosByCodeTutorDto {
    idTutorado?: string | undefined;
}

export class Semestre implements ISemestre {
    idSemestre?: number;
    denominacionSemestre!: string;
    activo?: boolean;

    constructor(data?: ISemestre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSemestre = _data["idSemestre"];
            this.denominacionSemestre = _data["denominacionSemestre"];
            this.activo = _data["activo"];
        }
    }

    static fromJS(data: any): Semestre {
        data = typeof data === 'object' ? data : {};
        let result = new Semestre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSemestre"] = this.idSemestre;
        data["denominacionSemestre"] = this.denominacionSemestre;
        data["activo"] = this.activo;
        return data;
    }
}

export interface ISemestre {
    idSemestre?: number;
    denominacionSemestre: string;
    activo?: boolean;
}

export class Tutor implements ITutor {
    code?: string | undefined;
    nombres?: string | undefined;
    apPaterno?: string | undefined;
    apMaterno?: string | undefined;
    email?: string | undefined;
    nroCelular?: number;
    lugarReunion?: string | undefined;
    enlaceReunion?: string | undefined;

    constructor(data?: ITutor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.nombres = _data["nombres"];
            this.apPaterno = _data["apPaterno"];
            this.apMaterno = _data["apMaterno"];
            this.email = _data["email"];
            this.nroCelular = _data["nroCelular"];
            this.lugarReunion = _data["lugarReunion"];
            this.enlaceReunion = _data["enlaceReunion"];
        }
    }

    static fromJS(data: any): Tutor {
        data = typeof data === 'object' ? data : {};
        let result = new Tutor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["nombres"] = this.nombres;
        data["apPaterno"] = this.apPaterno;
        data["apMaterno"] = this.apMaterno;
        data["email"] = this.email;
        data["nroCelular"] = this.nroCelular;
        data["lugarReunion"] = this.lugarReunion;
        data["enlaceReunion"] = this.enlaceReunion;
        return data;
    }
}

export interface ITutor {
    code?: string | undefined;
    nombres?: string | undefined;
    apPaterno?: string | undefined;
    apMaterno?: string | undefined;
    email?: string | undefined;
    nroCelular?: number;
    lugarReunion?: string | undefined;
    enlaceReunion?: string | undefined;
}

export class Tutorado implements ITutorado {
    code?: string | undefined;
    nombres?: string | undefined;
    apPaterno?: string | undefined;
    apMaterno?: string | undefined;
    email?: string | undefined;
    nroCelular?: number;
    direccion?: string | undefined;
    personReferencia?: string | undefined;
    nroCelularPersonaReferencia?: number;

    constructor(data?: ITutorado) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.nombres = _data["nombres"];
            this.apPaterno = _data["apPaterno"];
            this.apMaterno = _data["apMaterno"];
            this.email = _data["email"];
            this.nroCelular = _data["nroCelular"];
            this.direccion = _data["direccion"];
            this.personReferencia = _data["personReferencia"];
            this.nroCelularPersonaReferencia = _data["nroCelularPersonaReferencia"];
        }
    }

    static fromJS(data: any): Tutorado {
        data = typeof data === 'object' ? data : {};
        let result = new Tutorado();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["nombres"] = this.nombres;
        data["apPaterno"] = this.apPaterno;
        data["apMaterno"] = this.apMaterno;
        data["email"] = this.email;
        data["nroCelular"] = this.nroCelular;
        data["direccion"] = this.direccion;
        data["personReferencia"] = this.personReferencia;
        data["nroCelularPersonaReferencia"] = this.nroCelularPersonaReferencia;
        return data;
    }
}

export interface ITutorado {
    code?: string | undefined;
    nombres?: string | undefined;
    apPaterno?: string | undefined;
    apMaterno?: string | undefined;
    email?: string | undefined;
    nroCelular?: number;
    direccion?: string | undefined;
    personReferencia?: string | undefined;
    nroCelularPersonaReferencia?: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}